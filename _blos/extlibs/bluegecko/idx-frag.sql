/*
Copyright (c) 2007 Blue Gecko, Inc
License:

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

REM ------------------------------------------------------------------------------------------------
REM Author     : Unknown
REM              Modified by emurray
REM #DESC      : Show fragemented indexes and space savings if rebuilt
REM Usage      : Input parameter: none
REM Description: This script gets info from statistics generated by "analyze statistics" so the 
REM              quality of the result set depends largely on the currency of the CBO statistics.
REM		 Note that value for &blocksz is passed from plusenv.sql
REM ------------------------------------------------------------------------------------------------

@plusenv  /* do not remove this line */

col idxname 	format a38 	head "Owner.Index"
col uniq	format a01	head "U"
col tsname	format a28	head "Tablespace"
col sampsz 	format 99999999 head "Sample|Size"
col xtrblk	format 999999	head "Extra|Blocks"
col lfcnt	format 9999999	head "Leaf|Blocks"
col blk		format 9999999	head "Curr|Blocks"
col currmb	format 99999	head "Curr|MB"
col newmb	format 99999	head "New|MB"
col pfitbl	format a06	head "PF-I-L"
col it		format 99	head "IT"
col lanal	format a06	head "Last|Anal|YYMMDD"
col density	format a06	head "Dens%"


select 
  u.name ||'.'|| o.name  idxname,
  decode(bitand(i.property, 1), 0,' ', 1, 'x','?') uniq,
  ts.name tsname,
  to_char(i.analyzetime,'YYMMDD') lanal,
  i.samplesize sampsz, 
  rpad(substr(to_char(100 * i.rowcnt * (sum(h.avgcln) + 11) / (i.leafcnt * (&blocksz - 66 - i.initrans * 24)), '999.00'),2),6,' ') density, 
  lpad(i.pctfree$,2,' ')||'-'||rpad(i.initrans,1,' ')||'-'||rpad(i.blevel,1,' ') pfitbl,
  seg.blocks blk,
  i.leafcnt lfcnt,
  floor((1 - i.pctfree$/100) * i.leafcnt - i.rowcnt * (sum(h.avgcln) + 11) / (&blocksz - 66 - i.initrans * 24)  ) xtrblk,
  round(seg.bytes/(1024*1024)) currmb,
  (1 + i.pctfree$/100) * (i.rowcnt * (sum(h.avgcln) + 11) / (i.leafcnt * (&blocksz - 66 - i.initrans * 24)) * seg.bytes/(1024*1024)) newmb
from 
  sys.ind$  i, 
  sys.icol$  ic, 
  sys.hist_head$  h, 
  sys.obj$  o, 
  sys.user$  u,
  sys.ts$ ts,
  dba_segments seg
where 
  i.leafcnt > 1 and 
  i.type# in (1,4,6) and                -- exclude special types 
  ic.obj# = i.obj# and 
  h.obj# = i.bo# and 
  h.intcol# = ic.intcol# and 
  o.obj# = i.obj# and 
  o.owner# != 0 and 
  u.user# = o.owner# and
  i.ts# = ts.ts# and
  u.name = seg.owner and
  o.name = seg.segment_name and
  seg.blocks > i.leafcnt		-- if i.leafcnt > seg.blocks then statistics are not up-to-date
group by 
  u.name,
  decode(bitand(i.property, 1), 0,' ', 1, 'x','?'),
  ts.name,
  to_char(i.analyzetime,'YYMMDD'),
  i.samplesize,
  o.name, 
  i.rowcnt, 
  i.leafcnt, 
  i.initrans, 
  i.pctfree$, 
--p.value,
  i.blevel,
  i.leafcnt,
  seg.bytes,
  i.pctfree$,
  i.initrans,
  seg.blocks
having 
  50 * i.rowcnt * (sum(h.avgcln) + 11) 
  < (i.leafcnt * (&blocksz - 66 - i.initrans * 24)) * (50 - i.pctfree$) and 
  floor((1 - i.pctfree$/100) * i.leafcnt - 
    i.rowcnt * (sum(h.avgcln) + 11) / (&blocksz - 66 - i.initrans * 24)  ) > 0 
order by 6, 2;
